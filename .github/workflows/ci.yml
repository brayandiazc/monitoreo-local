name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: |
          black --check --diff .

      - name: Run tests
        run: |
          python test_setup.py

      - name: Test Flask application
        run: |
          python -c "
          from app import create_app
          app = create_app()
          print('‚úÖ Flask app created successfully')
          "

      - name: Test Docker build
        run: |
          docker build -t monitoreo-local:test .
          docker run --rm monitoreo-local:test python -c "
          from app import create_app
          app = create_app()
          print('‚úÖ Docker image works correctly')
          "

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: docker build -t monitoreo-local:test .

      - name: Start services for testing
        run: |
          docker-compose up -d flask-app prometheus
          sleep 30

      - name: Test Flask endpoint
        run: |
          curl -f http://localhost:5000/ || exit 1
          echo "‚úÖ Flask app is responding"

      - name: Test metrics endpoint
        run: |
          curl -f http://localhost:5000/metrics || exit 1
          echo "‚úÖ Metrics endpoint is working"

      - name: Test Prometheus target
        run: |
          curl -f http://localhost:9090/api/v1/targets || exit 1
          echo "‚úÖ Prometheus is running"

      - name: Cleanup
        if: always()
        run: docker-compose down

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## üöÄ Sistema de Monitoreo Local v${{ github.ref_name }}

            ### üìã Cambios en esta versi√≥n:
            - Mejoras en la aplicaci√≥n Flask
            - Actualizaciones de configuraci√≥n
            - Correcciones de bugs

            ### üõ†Ô∏è Instalaci√≥n:
            ```bash
            git clone ${{ github.repository }}
            cd monitoreo-local
            ./start.sh
            ```

            ### üìä Acceso:
            - **Flask App**: http://localhost:5000
            - **Prometheus**: http://localhost:9090
            - **Grafana**: http://localhost:3000
            - **Kibana**: http://localhost:5601

          draft: false
          prerelease: false
