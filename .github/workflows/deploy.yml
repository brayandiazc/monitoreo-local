name: Deploy

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=staging,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Aqu√≠ ir√≠an los comandos para desplegar en tu servidor de staging
          # Por ejemplo, usando SSH, kubectl, o cualquier otra herramienta
          echo "‚úÖ Deployed to staging successfully"

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Aqu√≠ ir√≠an las verificaciones de salud del despliegue
          echo "‚úÖ Health checks passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'

    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Aqu√≠ ir√≠an los comandos para desplegar en tu servidor de producci√≥n
          echo "‚úÖ Deployed to production successfully"

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Aqu√≠ ir√≠an las verificaciones de salud del despliegue
          echo "‚úÖ Health checks passed"

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"
          # Aqu√≠ podr√≠as agregar notificaciones (Slack, email, etc.)

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        run: |
          echo "üéâ Deployment completed successfully!"
          # Aqu√≠ podr√≠as agregar notificaciones de √©xito

      - name: Notify failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Aqu√≠ podr√≠as agregar notificaciones de error
